<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ride中引用Selenium2Library显示红色</title>
      <link href="/2019/01/12/ride%E4%B8%AD%E5%BC%95%E7%94%A8Selenium2Library%E6%98%BE%E7%A4%BA%E7%BA%A2%E8%89%B2/"/>
      <url>/2019/01/12/ride%E4%B8%AD%E5%BC%95%E7%94%A8Selenium2Library%E6%98%BE%E7%A4%BA%E7%BA%A2%E8%89%B2/</url>
      
        <content type="html"><![CDATA[<p>刚刚学习自动化，原本想着先跟着网上来做个简单的例子吧，没想到在引用Selenium2Library就受到了阻碍了&gt;.&lt;</p><p>我在ride中引用Selenium2Library的库报红，说明没有引用成功。然后我就去网上查找相关问题。分析一下网上出现的几种问题<br><a id="more"></a></p><ul><li>1.Selenium2Library名字填写时一定要记住S和L是大写的。如果是这个问题的话很容易就解决了。</li><li>2.没有安装robotframework-selenium2library，这个也很容易确认，进入cmd  pip list 可以检查是否安装，如果没有安装可以根据  pip  命令安装  pip install robotframework-selenium2library。我是安装了还是有问题。</li></ul><p>所以以上两种都不是我的问题。</p><p>没有办法我就安装了robotframework-requests，来验证是不是我安装的环境有问题，但是试下来，RequsetsLibrary可以在ride中正常引用。后来又看到了官网 <a href="https://github.com/robotframework/Selenium2Library说的Selenium2Library3.0也支持Python2.7" target="_blank" rel="noopener">https://github.com/robotframework/Selenium2Library说的Selenium2Library3.0也支持Python2.7</a>  我就尝试着  按照官网上的升级pip 命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade --pre robotframework-selenium2library</span><br></pre></td></tr></table></figure></p><p>安装成功后我立即启动了ride终于Selenium2Library引用成功了。</p><font color="red">不过也可以先在Tools-View RIDE Log中查看报错的日志信息是什么</font>]]></content>
      
      
      <categories>
          
          <category> 自动化学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RobotFramework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RobotFramework RIDE桌面快捷方式制作</title>
      <link href="/2019/01/10/RobotFramework%20RIDE%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F%E5%88%B6%E4%BD%9C/"/>
      <url>/2019/01/10/RobotFramework%20RIDE%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F%E5%88%B6%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>接上一篇笔记0.0</p><p>1.创建快捷方式</p><p>在桌面右键鼠标，弹出的菜单选择 新建-快捷方式，然后在请键入对象的位置输入这一行命令</p><pre><code>D:\Python27\pythonw.exe -c  “from robotide import main; main()”</code></pre><p><font color="red">注：根据自己安装python的路径，我的是在D盘的，还有双引号记得是英文格式哦，否则会启动不了哦</font><a id="more"></a></p><p>如图：<br> <img src="/img/RF1.png" alt="示例图" title="示例图"></p><p>点击下一步，输入快捷方式的名称，根据自己需要随意命名就好。</p><p> <img src="/img/RF2.png" alt="示例图" title="示例图"></p><p>点击完成后会在桌面生成图标</p><p> <img src="/img/RF3.png" alt="示例图" title="示例图"></p><p>2.如果想要把图标换成机器人图标需要快捷方式上点击右键-属性，如图</p><p> <img src="/img/RF4.png" alt="示例图" title="示例图"></p><p>点击“更改图标”，在浏览里找到目录<br>D:\Python27\Lib\site-packages\robotide\widgets，里面有个robot.ico的图标（大家到自己的安装目录相同路径去找一下），如图</p><p> <img src="/img/RF5.png" alt="示例图" title="示例图"></p><p>选它之后，点打开，确定之后再确定就可以了，效果如图</p><p> <img src="/img/RF6.png" alt="示例图" title="示例图"><br>最后快捷方式就制作完成了，可以打开正常使用了。</p>]]></content>
      
      
      <categories>
          
          <category> 自动化学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RobotFramework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Robot Framework的环境搭建</title>
      <link href="/2019/01/09/Robot%20Framework%E7%9A%84%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/01/09/Robot%20Framework%E7%9A%84%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Python2-7安装"><a href="#1-Python2-7安装" class="headerlink" title="1.Python2.7安装"></a>1.Python2.7安装</h3><p>下载地址：<a href="https://www.python.org/downloads/release/python-2715/" target="_blank" rel="noopener">https://www.python.org/downloads/release/python-2715/</a></p><p>python-2.7.15.amd64.msi</p><p>下载完成后，选择安装路径自行安装即可。安装完成后注意配置系统环境变量path:配置Python27安装路径和Python27/Scripts路径。<a id="more"></a></p><h3 id="2-Robot-framework的安装"><a href="#2-Robot-framework的安装" class="headerlink" title="2.Robot framework的安装"></a>2.Robot framework的安装</h3><p>RF框架是基于python的，所以一定要有python环境</p><p>安装方式选择一种即可：</p><p>（1）exe包安装<br>下载地址：<a href="https://pypi.python.org/pypi/robotframework/2.8.5#downloads" target="_blank" rel="noopener">https://pypi.python.org/pypi/robotframework/2.8.5#downloads</a></p><p>robotframework-2.8.5.win-amd64.exe</p><p>直接双击下一步即可。</p><p>（2）pip命令安装<br>pip install robotframework</p><h3 id="3-wxPython-的安装"><a href="#3-wxPython-的安装" class="headerlink" title="3.wxPython 的安装"></a>3.wxPython 的安装</h3><p>作用：Wxpython 是python 非常有名的一个GUI库，因为RIDE 是基于这个库开发的，所以这个必须安装。</p><p>下载地址：<a href="http://sourceforge.net/projects/wxpython/files/wxPython/2.8.12.1/" target="_blank" rel="noopener">http://sourceforge.net/projects/wxpython/files/wxPython/2.8.12.1/</a></p><p>wxPython2.8-win64-unicode-2.8.12.1-py27.exe</p><p>直接双击下一步即可。</p><h3 id="4-Robot-framework-ride"><a href="#4-Robot-framework-ride" class="headerlink" title="4.Robot framework-ride"></a>4.Robot framework-ride</h3><p>作用：RIDE就是一个图形界面的用于创建、组织、运行测试的软件。</p><p>安装方式选一种即可：</p><p>（1）包安装<br>下载地址：<a href="https://pypi.python.org/pypi/robotframework-ride" target="_blank" rel="noopener">https://pypi.python.org/pypi/robotframework-ride</a></p><p>robotframework-ride-1.5.1.tar.gz</p><p>下载完成后将其解压，然后进入到解压后的文件路径进行安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd D:\robotframework-ride-1.5.1</span><br><span class="line"></span><br><span class="line">python  setup.py install</span><br></pre></td></tr></table></figure></p><p>（2）pip安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install robotframework-ride</span><br></pre></td></tr></table></figure></p><h3 id="5-Robot-framework-selenium2library"><a href="#5-Robot-framework-selenium2library" class="headerlink" title="5.Robot framework-selenium2library"></a>5.Robot framework-selenium2library</h3><p>作用：RF-seleniumlibrary 可以看做RF版的selenium 库，selenium （webdriver）可以认为是一套基于web的规范（API），所以，RF 、appium 等测试工具都可以基于这套API进行页面的定位与操作。</p><p>下载地址：<br><a href="https://github.com/robotframework/Selenium2Library#readme" target="_blank" rel="noopener">https://github.com/robotframework/Selenium2Library#readme</a></p><p>Selenium2Library-master.zip</p><p>下载完成后将其解压，然后进入到解压后的文件路径进行安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd D:\Selenium2Library-master</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure><h3 id="6-查看pybot版本"><a href="#6-查看pybot版本" class="headerlink" title="6.查看pybot版本"></a>6.查看pybot版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd D:\Python27\Scripts</span><br><span class="line">pybot --version</span><br></pre></td></tr></table></figure><h3 id="7-启动RIDE"><a href="#7-启动RIDE" class="headerlink" title="7.启动RIDE"></a>7.启动RIDE</h3><ul><li><p>1.通过文件启动（双击D:\Python27\Lib\site-packages\robotide下的<strong>init</strong>.py文件）</p></li><li><p>2.通过命令启动（运行-&gt;ride.py回车/确认，打开ride.py文件之后（以python方式打开 ）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd D:\Python27\Scripts\</span><br><span class="line">python ride.py</span><br></pre></td></tr></table></figure></li><li><p>3.将D:\Python27\Scripts\ride.py创建快捷键（具体怎么创建，详见下一篇笔记）<br>建议创建快捷方式，方便使用</p></li></ul><font color="red">注：根据自己的python安装路径，我的是在D盘的</font>]]></content>
      
      
      <categories>
          
          <category> 自动化学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RobotFramework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>换了电脑如何使用hexo继续写博客</title>
      <link href="/2019/01/02/%E6%8D%A2%E4%BA%86%E7%94%B5%E8%84%91%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E7%BB%A7%E7%BB%AD%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/01/02/%E6%8D%A2%E4%BA%86%E7%94%B5%E8%84%91%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E7%BB%A7%E7%BB%AD%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<ul><li>电脑中病毒了，换了系统，无法使用hexo再发布文章到个人博客，百度找教程0.0特此记录一下，万一哪天又中病毒了呢！<a id="more"></a></li></ul><p>一、安装必要软件</p><ul><li><p>安装Git客户端</p></li><li><p>安装node.js</p></li></ul><p>二、原文件拷贝<br>将你原来电脑上个人博客目录下必要文件拷到你的新电脑上（比如D:/Blog目录下），注意无需拷全部，只拷如下几个目录：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">config.yml</span><br><span class="line">package.json</span><br><span class="line">scaffolds/</span><br><span class="line"><span class="built_in">source</span>/</span><br><span class="line">themes/</span><br></pre></td></tr></table></figure></p><p>三、安装 hexo<br>在 cmd 下输入下面指令安装 hexo：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></p><p>四、进入 D:/Blog 目录（你拷贝到新电脑的目录），输入下面指令安装相关模块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save  // 文章部署到 git 的模块</span><br></pre></td></tr></table></figure></p><p>五、在github官网添加新电脑产生的秘钥</p><p>Github 添加 SSH Keys</p><p>首先在本地创建 SSH Keys:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"15754367707@163.com"</span></span><br></pre></td></tr></table></figure></p><p>后面的邮箱即为 github 注册邮箱，也是登录 Github 的邮箱，之后会要求确认路径和输入密码，一路回车就行。</p><ul><li><p>成功的话会在 ~/下生成 .ssh文件夹，进去，打开 id_rsa.pub，复制里面的key即可。</p></li><li><p>输入 eval “$(ssh-agent -s)” ，添加密钥到ssh-agent，再输入 ssh-add ~/.ssh/id_rsa ，添加生成的SSH key到ssh-agent</p><p><img src="/img/hexo1.png" alt="示例图" title="示例图"></p></li><li><p>然后我们再次测试下公钥有没有添加成功：ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a></p><p><img src="/img/hexo2.png" alt="示例图" title="示例图"></p></li></ul><p>六、测试</p><ul><li>这时候使用 hexo s 基本可以看到你新添加的文章了。</li></ul><p>七、部署发布文章<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean   // 清除缓存 网页正常情况下可以忽略此条命令</span><br><span class="line">hexo g       // 生成静态网页</span><br><span class="line">hexo d       // 开始部署</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JMeter学习(二)元件的作用域与执行顺序</title>
      <link href="/2018/07/15/JMeter%E5%AD%A6%E4%B9%A0-%E4%BA%8C-%E5%85%83%E4%BB%B6%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
      <url>/2018/07/15/JMeter%E5%AD%A6%E4%B9%A0-%E4%BA%8C-%E5%85%83%E4%BB%B6%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="一、元件的作用域"><a href="#一、元件的作用域" class="headerlink" title="一、元件的作用域"></a>一、元件的作用域</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JMeter中共有8类可被执行的元件（<font color="#01B468">测试计划与线程组不属于元件</font>），这些元件中，取样器是典型的不与其它元件发生交互作用的元件，逻辑控制器只对其子节点的取样器有效，而其它元件（config elements 、timers 、post-processors、assertions、listeners、）需要与取样器（sampler）等元件交互。<a id="more"></a></p><p><strong>配置元件（config elements ）</strong></p><ul><li>元件会影响其作用范围内的所有元件。</li></ul><p><strong>前置处理程序（Per-processors）</strong></p><ul><li>元件在其作用范围内的每一个sampler元件之前执行。</li></ul><p><strong>定时器（timers ）</strong></p><ul><li>元件对其作用范围内的每一个sampler 有效。</li></ul><p><strong>后置处理程序（Post-processors）</strong></p><ul><li>元件在其作用范围内的每一个sampler元件之后执行。</li></ul><p><strong>断言（Assertions）</strong></p><ul><li>元件对其作用范围内的每一个sampler 元件执行后的结果执行校验。</li></ul><p><strong>监听器（Listeners）</strong></p><ul><li>元件收集其作用范围的每一个sampler元件的信息并呈现。</li></ul><p>在Jmeter中，元件的作用域是靠测试计划的的树型结构中元件的父子关系来确定的，作用域的原则是：</p><ul><li>取样器（sampler）元件不和其它元件相互作用，因此不存在作用域的问题。<br>逻辑控制器（Logic Controller）元件只对其子节点中的取样器 和 逻辑控制器作用。<br>除取样器 和逻辑控制器 元件外，其他6类元件，如果是某个sampler的子节点，则该元件公对其父子节点起作用。<br>除取样器和逻辑控制器元件外的其他6类元件，如果其父节点不是sampler ，则其作用域是该元件父节点下的其他所有后代节点（包括子节点，子节点的子节点等）。</li></ul><h3 id="二、元件的执行顺序"><a href="#二、元件的执行顺序" class="headerlink" title="二、元件的执行顺序"></a>二、元件的执行顺序</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;了解了元件有作用域之后，来看看元件的执行顺序，元件执行顺序的规则很简单，在同一作用域名范围内，测试计划中的元件按照如下顺序执行。</p><p>（1）配置元件（config elements ）</p><p>（2）前置处理程序（Per-processors）</p><p>（3）定时器（timers ）</p><p>（4）取样器（Sampler）</p><p>（5）后置处理程序（Post-processors） （除非Sampler 得到的返回结果为空）。</p><p>（6）断言（Assertions）（除非Sampler 得到的返回结果为空）。</p><p>（7）监听器（Listeners）（除非Sampler 得到的返回结果为空）。</p><p>关于执行顺序，有三点需要注意：</p><ul><li><p>前置处理器、后置处理器和断言等元件只能对 取样器作用，因此，如果在它们的作用域内没有任何取样器，则不会被执行。</p></li><li><p>如果在同一作用域范围内有多个同一类型的元件，则这些元件按照它们在测试计划中的<font color="#01B468">上下顺序一次执行</font>。</p></li><li><p>一个断言在测试树中是分等级的。如果它的父元件是请求，它就被应用于那个请求。如果它的父元件是控制器，它就影响所有那个控制器下的所有请求。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JMeter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JMeter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JMeter学习(一)工具简单介绍</title>
      <link href="/2018/07/14/JMeter%E5%AD%A6%E4%B9%A0-%E4%B8%80-%E5%B7%A5%E5%85%B7%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/07/14/JMeter%E5%AD%A6%E4%B9%A0-%E4%B8%80-%E5%B7%A5%E5%85%B7%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="一、JMeter-介绍"><a href="#一、JMeter-介绍" class="headerlink" title="一、JMeter 介绍"></a>一、JMeter 介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Apache JMeter是<font color="blue">100%纯JAVA</font>桌面应用程序，被设计为用于测试客户端/服务端结构的软件(例如web应用程序)。它可以用来测试静态和动态资源的性能，例如：静态文件，Java Servlet,CGI Scripts,Java Object,数据库和FTP服务器等等。JMeter可用于模拟大量负载来测试一台服务器，网络或者对象的健壮性或者分析不同负载下的整体性能。<a id="more"></a><br>同时，JMeter可以帮助你对你的应用程序进行回归测试。通过你创建的测试脚本和assertions来验证你的程序返回了所期待的值。为了更高的适应性，JMeter允许你使用<font color="blue">正则表达式</font>来创建这些assertions.</p><h4 id="JMeter与LoadRunner比较"><a href="#JMeter与LoadRunner比较" class="headerlink" title="JMeter与LoadRunner比较"></a>JMeter与LoadRunner比较</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JMeter 是一款<font color="#FF0000">开源</font><font color="blue">(有着典型开源工具特点：界面不美观)</font>测试工具，虽然与LoadRunner相比有很多不足，比如：<font color="#01B468">它结果分析能力没有LoadRunner详细；</font>但它的优点也有很多：</p><ul><li>开源，它是一款开源的免费软件，使用它你不需要支付任何费用，</li><li>小巧，相比LR的庞大（最新LR11将近4GB），它非常小巧，不需要安装，但需要JDK环境，因为它是使用java开发的工具。</li><li>功能强大，jmeter设计之初只是一个简单的web性能测试工具，但经过不段的更新扩展，现在可以完成数据库、FTP、LDAP、WebService等方面的测试。因为它的开源性，当然你也可以根据自己的需求扩展它的功能。<br>两者最大的区别：<font color="#01B468">jmeter不支持IP欺骗，而LR支持。</font><h5 id="JMeter缺点"><a href="#JMeter缺点" class="headerlink" title="JMeter缺点"></a>JMeter缺点</h5>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用JMeter<font color="blue">无法验证JS程序，也无法验证页面UI，</font>所以必须要和Selenium配合来完成Web2.0应用的测试。 </li></ul><h3 id="二、JMeter-下载安装"><a href="#二、JMeter-下载安装" class="headerlink" title="二、JMeter 下载安装"></a>二、JMeter 下载安装</h3><p>1）JMeter安装</p><ol><li><p><a href="http://jmeter.apache.org/下载最新版本的JMeter，解压文件到任意目录" target="_blank" rel="noopener">http://jmeter.apache.org/下载最新版本的JMeter，解压文件到任意目录</a></p></li><li><p>安装JDK，配置环境变量JAVA_HOME.</p></li><li><p>系统要求：<font color="#01B468">JMeter2.11 需要JDK1.6以上的版本支持运行</font></p></li><li><p>JMeter可以运行在如下操作系统上：Unix，Windows和Open VMS.</p></li><li><p><font color="#01B468">避免在一个有空格的路径安装JMeter</font>，这将导致远程测试出现问题。</p></li></ol><p>2）JMeter插件安装</p><ol><li><p>插件下载地址： <a href="http://jmeter-plugins.org/downloads/all/" target="_blank" rel="noopener">http://jmeter-plugins.org/downloads/all/</a></p></li><li><p>插件下载后解压：找到JMeterPlugins-Extras.jar,把JMeterPlugins-Extras.jar放到apache-jmeter-2.12\lib\ext目录。</p></li></ol><h3 id="三、JMeter-运行"><a href="#三、JMeter-运行" class="headerlink" title="三、JMeter 运行"></a>三、JMeter 运行</h3><ol><li><p>进入bin目录运行jmeter.bat启动jmeter</p><font color="#01B468">注意：打开的时候会有两个窗口，JMeter的命令窗口和JMeter的图形操作界面，不可以关闭命令窗口。</font></li><li><p>JMeter的classpath:</p><p>如果你想添加其他JAR文件到JMeter的classpath中，你必须复制他们到lib目录中;</p><p>如果你开发了一个JMeter特定组件或有效的jar文件，复制到lib目录下的ext目录中。</p></li><li><p>打开之后显示的是中文，如果你想使用其他语言，比如英文，那么通过菜单选项-&gt;选择语言-&gt;英文即可，当然转为中文也是同样操作。</p></li></ol><h3 id="四、JMeter-测试计划元件"><a href="#四、JMeter-测试计划元件" class="headerlink" title="四、JMeter 测试计划元件"></a>四、JMeter 测试计划元件</h3><p>打开Jmeter页面：包括测试计划。</p><p><strong>1、Test Plan (测试计划)</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用来描述一个性能测试，包含与本次性能测试所有相关的功能。也就说本的性能测试的所有内容是于基于一个计划的。</p><p>右键单击“测试计划”弹出菜单</p><p><strong>2、Threads（Users）线程 用户</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;虽然有三个添加线程组的选项，名字不一样， 创建之后，其界面是完全一样的。之前的版本只有一个线程组的名字。现在多一个setUp theread Group 与terDown Thread Group</p><p>1) setup thread group </p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一种特殊类型的ThreadGroup的，可用于执行预测试操作。这些线程的行为完全像一个正常的线程组元件。不同的是，这些类型的线程执行测试前进行定期线程组的执行。</p><ul><li><font color="#01B468">setUp Thread Group类似于lr的init.可用于执行预测试操作。</font></li></ul><p>2) teardown thread group. </p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一种特殊类型的ThreadGroup的，可用于执行测试后动作。这些线程的行为完全像一个正常的线程组元件。不同的是，这些类型的线程执行测试结束后执行定期的线程组。</p><ul><li><font color="#01B468">tearDown Thread Group类似于lr的end.可用于执行测试后动作。</font></li></ul><p>3) thread group(线程组).</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个就是我们通常添加运行的线程。通俗的讲一个线程组,，可以看做一个虚拟用户组，线程组中的每个线程都可以理解为一个虚拟用户。线程组中包含的线程数量在测试执行过程中是不会发生改变的。</p><p><strong>3、测试片段（Test Fragment）</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;测试片段元素是控制器上的一个种特殊的线程组，它在测试树上与线程组处于一个层级。它与线程组有所不同，因为它不被执行，除非它是一个模块控制器或者是被控制器所引用时才会被执行。</p><p><del>控制器</del></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JMeter有两种类型的控制器：取样器（sample）和逻辑控制器（Logic Controller），用这些原件来驱动处理一个测试。</p><p><strong>4、取样器（Sampler）</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;取样器（Sampler）是性能测试中向服务器发送请求，记录响应信息，记录响应时间的最小单元，JMeter 原生支持多种不同的sampler ， 如 HTTP Request Sampler 、 FTP  Request Sampler 、TCP  Request Sampler 、 JDBC Request Sampler 等，每一种不同类型的 sampler 可以根据设置的参数向服务器发出不同类型的请求。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Jmeter的所有Sampler中，Java Request Sampler与BeanShell Requst Sampler是两种特殊的可定制的Sampler.</p><p><strong>5、逻辑控制器（Logic Controller）</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;逻辑控制器，包括两类无件，一类是用于控制test plan 中 sampler 节点发送请求的逻辑顺序的控制器，常用的有 如果（If）控制器 、 switch Controller 、Runtime Controller、循环控制器等。另一类是用来组织可控制 sampler 来节点的， 如 事务控制器、吞吐量控制器。</p><p><strong>6、配置元件（Config Element）</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;配置元件（config element）用于提供对静态数据配置的支持。CSV Data Set config 可以将本地数据文件形成数据池 （Data Pool），而对应于HTTP Request Sampler和 TCP Request Sampler等类型的配制无件则可以修改 Sampler的默认数据。</p><ul><li>例如，HTTP Cookie Manager 可以用于对 HTTP Request Sampler 的 cookie 进行管理。</li></ul><ul><li>HTTP 请求默认值不会触发Jmeter发送http请求，而只是定义HTTP请求的默认属性。</li></ul><p><strong>7、定时器（Timer）</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;定时器（Timer）用于操作之间设置等待时间，等待时间是性能测试中常用的控制客户端QPS的手段。类似于LoadRunner里面的“思考时间”。 JMeter 定义了Bean Shell Timer、Constant Throughput Timer、固定定时器等不同类型的Timer。</p><p><strong>8、前置处理器（Per Processors）</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前置处理器用于在实际的请求发出之前对即将发出的请求进行特殊处理。例如，HTTP URL重写修复符则可以实现URL重写，当RUL中有sessionID 一类的session信息时，可以通过该处理器填充发出请求的实际的sessionID 。</p><p><strong>9、后置处理器（Post Processors）</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;后置处理器是用于对Sampler 发出请求后得到的服务器响应进行处理。一般用来提取响应中的特定数据（类似LoadRunner测试工具中的关联概念）。例如，XPath  Extractor 则可以用于提取响应数据中通过给定XPath 值获得的数据;正则表达式提取器，则可以提取响应数据中通过正则表达式获得的数据。</p><p><strong>10、断言（Assertions）</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;断言用于检查测试中得到的相应数据等是否符合预期，断言一般用来设置<font color="#FF0000">检查点</font>，用以保证性能测试过程中的数据交互是否与预期一致。</p><p><strong>11、监听器（Listener）</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个监听器可不是用来监听系统资源的元件。它是用来对测试结果数据进行处理和可视化展示的一系列元件。 <font color="#FF0000">图形结果、查看结果树、聚合报告、用表格察看结果</font>都是我们经常用到的元件。</p>]]></content>
      
      
      <categories>
          
          <category> JMeter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JMeter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>winscp上传文件发生错误码4的问题</title>
      <link href="/2018/06/20/winscp%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%8F%91%E7%94%9F%E9%94%99%E8%AF%AF%E7%A0%814%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2018/06/20/winscp%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%8F%91%E7%94%9F%E9%94%99%E8%AF%AF%E7%A0%814%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关于使用winscp 上传文件发生错误码4的问题，各种百度找资料，最后的原因竟然是磁盘容量不足。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;换个物理分区，重新上传就好了。<a id="more"></a></p><ul><li>所以下次遇到类似错误时，我觉得，对应磁盘的容量和权限也是一个排除的方向。</li></ul><p>  <img src="/img/winscp.png" alt="示例图" title="示例图"></p>]]></content>
      
      
      <categories>
          
          <category> 学习中遇到问题及解决方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WinScp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看Linux系统配置的命令</title>
      <link href="/2018/06/09/%E6%9F%A5%E7%9C%8BLinux%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/06/09/%E6%9F%A5%E7%9C%8BLinux%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE%E7%9A%84%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="一：CPU"><a href="#一：CPU" class="headerlink" title="一：CPU"></a>一：CPU</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@zhoumingyan /]<span class="comment"># cat /proc/cpuinfo</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="二：内存"><a href="#二：内存" class="headerlink" title="二：内存"></a>二：内存</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@zhoumingyan /]<span class="comment"># cat /proc/meminfo</span></span><br></pre></td></tr></table></figure><h3 id="三：查看CPU位数"><a href="#三：查看CPU位数" class="headerlink" title="三：查看CPU位数"></a>三：查看CPU位数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1.[root@zhoumingyan /]<span class="comment"># getconf LONG_BIT</span></span><br><span class="line">2.[root@zhoumingyan /]<span class="comment"># uname -i</span></span><br></pre></td></tr></table></figure><h3 id="四：查看Linux版本"><a href="#四：查看Linux版本" class="headerlink" title="四：查看Linux版本"></a>四：查看Linux版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.[root@zhoumingyan /]<span class="comment"># cat /etc/issue</span></span><br><span class="line">2.[root@zhoumingyan /]<span class="comment"># cat /proc/version</span></span><br></pre></td></tr></table></figure><h3 id="五：查看内核版本"><a href="#五：查看内核版本" class="headerlink" title="五：查看内核版本"></a>五：查看内核版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@zhoumingyan /]<span class="comment"># uname -a</span></span><br></pre></td></tr></table></figure><h3 id="六：主机名"><a href="#六：主机名" class="headerlink" title="六：主机名"></a>六：主机名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@zhoumingyan /]<span class="comment"># hostname</span></span><br></pre></td></tr></table></figure><h3 id="七：查看selinux情况"><a href="#七：查看selinux情况" class="headerlink" title="七：查看selinux情况"></a>七：查看selinux情况</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@zhoumingyan /]<span class="comment"># sestatus</span></span><br></pre></td></tr></table></figure><h3 id="八：网络"><a href="#八：网络" class="headerlink" title="八：网络"></a>八：网络</h3><ol><li><p>IP  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@zhoumingyan /]<span class="comment"># ifconfig</span></span><br></pre></td></tr></table></figure></li><li><p>网关</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@zhoumingyan /]<span class="comment"># cat /etc/sysconfig/network</span></span><br></pre></td></tr></table></figure></li><li><p>DNS</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@zhoumingyan /]<span class="comment"># cat /etc/resolv.conf</span></span><br></pre></td></tr></table></figure></li><li><p>修改HOST文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@zhoumingyan /]<span class="comment"># cat /etc/hosts</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="九：磁盘和分区"><a href="#九：磁盘和分区" class="headerlink" title="九：磁盘和分区"></a>九：磁盘和分区</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@zhoumingyan /]<span class="comment"># df -h</span></span><br></pre></td></tr></table></figure><h3 id="十：查看键盘布局"><a href="#十：查看键盘布局" class="headerlink" title="十：查看键盘布局"></a>十：查看键盘布局</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@zhoumingyan /]<span class="comment"># cat /etc/sysconfig/keyboard</span></span><br></pre></td></tr></table></figure><h3 id="十一：查看默认语言"><a href="#十一：查看默认语言" class="headerlink" title="十一：查看默认语言"></a>十一：查看默认语言</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@zhoumingyan /]<span class="comment">#cat /etc/sysconfig/i18n</span></span><br></pre></td></tr></table></figure><h3 id="十二：查看文件或目录在磁盘空间的大小"><a href="#十二：查看文件或目录在磁盘空间的大小" class="headerlink" title="十二：查看文件或目录在磁盘空间的大小"></a>十二：查看文件或目录在磁盘空间的大小</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@zhoumingyan /]<span class="comment">#du -h</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 目录结构</title>
      <link href="/2018/06/04/Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
      <url>/2018/06/04/Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p><strong>/</strong>：根目录</p><p><strong>/usr</strong>:包含所有的命令、程序库、文档和其它文件等。这些文件在正常操作下不会被改变的。这个目录也包含你的linux发行版本的主要的应用程序，如Netscape. /var:包含在正常操作中被改变的文件：假脱机文件、记录文件、加锁文件、临时文件和页格式化文件等。<a id="more"></a>这个目录中存放着那些不断在扩充着的东西，为了保持/usr的相对稳定，那些经常被修改的目录可以放在这个目录下，实际上许多系统管理员都是这样干的。顺带说一下系统的日志文件就在/var/log目录中。</p><p><strong>/home</strong>：用户的主目录。这个目录在系统升级时应该保留。</p><p><strong>/proc</strong>:是一个虚拟的目录，它是系统内存的映射。它们实际上并不存在磁盘上，也不占用空间。（用ls -l可以显示它们的大小）当查看这些文件时，实际上是访问存在内存中的信息，这些信息用于访问系统</p><p><strong>/bin</strong>：系统启动时需要的执行文件(二进制),这些文件可以被普通用户使用。</p><p><strong>/sbin</strong>：系统执行文件(二进制),这些文件不打算被普通用户使用。（普通用户仍然可以使用它们，但要指定目录）</p><p><strong>/etc</strong>:操作系统的配置文件目录</p><p><strong>/root</strong>:系统管理员的Home目录</p><p><strong>/dev</strong>：设备文件目录。Linux下设备被当成文件，这样一来硬件被抽象化，便于读写、网络共享以及需要临时装载到文件系统中。正常情况下，设备会有一个独立的目录。这些设备的内容会出现在独立的子目录下。Linux没有所谓的驱动符。</p><p><strong>/lib</strong>：存放系统最基本的动态链接共享库</p><p><strong>/boot</strong>:用于自举加载程序的文件。当计算机启动时，这些文件首先被加载。</p><p><strong>/opt</strong>：可选的应用程序。</p><p><strong>/tmp</strong>:临时文件。该目录会被自动清理干净。</p><p><strong>/lost+found</strong>:在文件系统修复时恢复的文件。这个目录平时是空的，当系统不正常关机后，这里就成了无家可归的文件的避难所了。</p><p><strong>/mnt</strong>:这个目录是空的，系统提供这个目录是让用户临时挂载别的文件系统。</p><ul><li>小结：</li></ul><ol><li><p>本地管理员安装额外的软件安装在/usr/local目录下并符号链接在/usr/local/bin下的主执行程序。</p></li><li><p>系统的所有设置在/etc目录下。</p></li><li><p>不要修改根目录和/usr目录下的任何内容</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>端口被占用问题</title>
      <link href="/2016/11/15/%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2016/11/15/%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>当我们同时安装了Oracle和Tomcat的时候，Tomcat启动时就会报错说端口被占用了。<br>那么如何来解决呢?<a id="more"></a><br>两种方法：</p><p>第一种方法就是修改我们的Tomcat的端口号，改成其他不冲突的即可。方便简单   </p><p>第二种方法就是结束当前占用端口的进程，下面是具体步骤：</p><font color="blue">以我电脑进程为例： </font><p>   1.打开cmd 输入 <font color="red"> netstat   -ano|findstr  8080 </font></p><p>   //说明：查看占用8080端口的进程</p><p>   2.接着输入  <font color="red"> taskkill  /pid 2956  /f  </font>      </p><ul><li><p>2956是占用端口的进程</p><p>//说明：结束掉占用端口号的进程</p></li></ul><p>但是呢这种方法只能是一时的，下次启动还是会占用的。个人认为修改端口较好。一次解决。</p>]]></content>
      
      
      <categories>
          
          <category> 学习中遇到问题及解决方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第4天static静态关键字和单例模式</title>
      <link href="/2015/12/01/%E7%AC%AC4%E5%A4%A9static%E9%9D%99%E6%80%81%E5%85%B3%E9%94%AE%E5%AD%97%E5%92%8C%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2015/12/01/%E7%AC%AC4%E5%A4%A9static%E9%9D%99%E6%80%81%E5%85%B3%E9%94%AE%E5%AD%97%E5%92%8C%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="一、static关键字"><a href="#一、static关键字" class="headerlink" title="一、static关键字"></a>一、static关键字</h3><h4 id="1-static关键字修饰在属性上"><a href="#1-static关键字修饰在属性上" class="headerlink" title="1.static关键字修饰在属性上"></a>1.static关键字修饰在属性上</h4><ol><li>语法</li></ol><p>语法：static数据类型 变量名</p><p>使用static修饰的属性我们认为是类的属性，不带static修饰的属性我们认为是对象的属性。<br><a id="more"></a></p><ol start="2"><li>类属性访问</li></ol><p>类的属性访问：</p><font color="red">第一种方式：类名.类属性（推荐使用）</font><p>第二种方式：对象实例.类属性</p><ol start="3"><li>应用场景</li></ol><p>应用的场景：我们把常量一般定义成static，或者当前类创建的每一个对象都有相同的属性也可以把这种属性定义成static的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">name和age都是对象属性</span><br><span class="line">*/</span><br><span class="line">String name;</span><br><span class="line"></span><br><span class="line">int age;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">人的数量，类属性</span><br><span class="line">*/</span><br><span class="line">static int personNum;</span><br><span class="line"></span><br><span class="line">//static String file_name = <span class="string">"struts.xml"</span></span><br><span class="line"></span><br><span class="line">public void <span class="function"><span class="title">introduce</span></span>()&#123;</span><br><span class="line">//通过对象实例来访问类属性</span><br><span class="line">System.out.println(<span class="string">"我叫"</span>+this.name+<span class="string">"年龄是"</span>+this.age+<span class="string">"编号"</span>+this.personNum+<span class="string">"报到"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class StaticDemo&#123;</span><br><span class="line"></span><br><span class="line">public static void main(String [] args)&#123;</span><br><span class="line">//创建一个person的实例</span><br><span class="line">Person p = new Person();</span><br><span class="line">//给人的数量加一</span><br><span class="line">Person.personNum++;</span><br><span class="line"></span><br><span class="line">p.name = <span class="string">"周铭艳"</span>;</span><br><span class="line">p.age = 18;</span><br><span class="line"></span><br><span class="line">p.introduce();</span><br><span class="line"></span><br><span class="line">//创建一个person的实例</span><br><span class="line">Person p1 = new Person();</span><br><span class="line">//给人的数量加一</span><br><span class="line">Person.personNum++;</span><br><span class="line"></span><br><span class="line">p1.name = <span class="string">"鲁达"</span>;</span><br><span class="line">p1.age = 30;</span><br><span class="line"></span><br><span class="line">p1.introduce();</span><br><span class="line">//通过类名来访问类的属性</span><br><span class="line">System.out.println(<span class="string">"当前人数："</span>+Person.personNum);</span><br><span class="line">//通过对象实例来访问类属性</span><br><span class="line">System.out.println(<span class="string">"当前人数："</span>+p.personNum);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>内存中的加载流程</li></ol><p>上述代码在内存中的流程<br>  <img src="/img/27.png" alt="图1" title="图1"><br><img src="/img/28.png" alt="图2" title="图2"></p><ol start="5"><li>生命周期</li></ol><p>对象属性生命周期：创建对象的时候初始化对象属性（没有类属性早），当当前对象变成匿名对象时，jvm会回收该垃圾对象，对象属性随之消失。</p><p>类属性的生命周期：当Person.class被载入内存时personNum类属性就初始化了，jvm关闭类属性就消失了</p><h4 id="二、static关键字修饰在方法上"><a href="#二、static关键字修饰在方法上" class="headerlink" title="二、static关键字修饰在方法上"></a>二、static关键字修饰在方法上</h4><ol><li>语法</li></ol><p>语法：public static 返回值（void） 方法名（数据类型1 变量1，数据类型2 变量2，….）{<br>    方法体<br>    [return 结果]<br>}</p><p>Static修饰在方法上就是类方法。</p><ol start="2"><li>类方法的访问</li></ol><p>类方法访问：</p><pre><code>&lt;font color=&apos;red&apos;&gt;第一种方式：类名.类方法()推荐使用&lt;/font&gt;第二种方式：对象实例.类方法()</code></pre><ol start="3"><li>类方法对属性的访问</li></ol><ul><li>访问对象属性：<pre><code>类方法是无论是通过类访问还是通过对象访问都不能直接访问对象属性的</code></pre></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Demo&#123;</span><br><span class="line"></span><br><span class="line">int num = 50;</span><br><span class="line"></span><br><span class="line">static int num1 = 100;</span><br><span class="line"></span><br><span class="line">//类方法</span><br><span class="line">public static void <span class="function"><span class="title">printNum</span></span>()&#123;</span><br><span class="line">//System.out.println(<span class="string">"我是一个静态方法"</span>);</span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/29.png" alt="图3" title="图3"></p><p>类方法对类属性的访问：<br>    类方法对类属性的访问是可以的。</p><font color="blue">注意：对象方法和属性只能通过对象来调用。<br>      类方法和类属性既可以通过类来调用也可以通过对象来调用。</font><ol start="4"><li><p>类方法应用场景：</p><p> 做工具类</p></li></ol><p>做数组的工具类<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">class ArrayUtils&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void sort(int [] array)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(int i = 0; i &lt; array.length -1 ; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(int j = 0; j &lt; array.length - 1 -i; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(array[j] &lt; array[j+1])&#123;</span><br><span class="line">int temp = array[j];</span><br><span class="line">array[j] = array[j+1];</span><br><span class="line">array[j+1] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">public static void printArray(int [] array)&#123;</span><br><span class="line"><span class="keyword">for</span>(int i = 0; i &lt; array.length; i++)&#123;</span><br><span class="line">System.out.print(array[i]+<span class="string">"\t"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String [] args)&#123;</span><br><span class="line">int [] array = &#123;97,12,190, 4, 52,98&#125;;</span><br><span class="line">//ArrayUtils.printArray(array);</span><br><span class="line">//ArrayUtils.sort(array);</span><br><span class="line">System.out.println();</span><br><span class="line">//ArrayUtils.printArray(array);</span><br><span class="line"></span><br><span class="line">//在同一个类中可以不加类名去访问静态方法。如果是不同类之间来访问静态方法必须加类名</span><br><span class="line">printArray(array);</span><br><span class="line">sort(array);</span><br><span class="line">System.out.println();</span><br><span class="line">printArray(array);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-单例模式"><a href="#2-单例模式" class="headerlink" title="2.单例模式"></a>2.单例模式</h3><p>设计模式：一共有23种设计模式 设计模式就是有经验的前人通过实践总结下来被大家公认的代码设计思想。</p><p>单例模式：这种模式只能产生一个对象。</p><p>应用场景非常多：比如windows的任务管理器，回收站，java中数据库连接池，spring中bean的管理等等。</p><p>1.单例模式的创建步骤</p><pre><code>（1）将默认的构造器私有化（2）在类中定义一个当前类的类型的静态属性，并且创建该当前类的对象。（3）提供一个静态的类方法来返回当前类的静态属性的对象。</code></pre><p>懒汉模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">懒汉模式</span><br><span class="line">*/</span><br><span class="line">class Singleton&#123;</span><br><span class="line"></span><br><span class="line">private static Singleton s = new Singleton();</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">创建私有构造器</span><br><span class="line">*/</span><br><span class="line">private <span class="function"><span class="title">Singleton</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">提供一个共外界来获得当前类的一个实例的类方法</span><br><span class="line">注意：类方法所访问的类的属性一定是类属性</span><br><span class="line">*/</span><br><span class="line">public static Singleton <span class="function"><span class="title">getInstance</span></span>()&#123;</span><br><span class="line"><span class="built_in">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestSingleton&#123;</span><br><span class="line"></span><br><span class="line">public static void main(String [] args)&#123;</span><br><span class="line"></span><br><span class="line">Singleton s = Singleton.getInstance();</span><br><span class="line">System.out.println(s);</span><br><span class="line">Singleton s1 = Singleton.getInstance();</span><br><span class="line">System.out.println(s1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>饿汉模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">饿汉模式</span><br><span class="line">*/</span><br><span class="line">class Singleton1&#123;</span><br><span class="line"></span><br><span class="line">private static Singleton1 s = null;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">创建私有构造器</span><br><span class="line">*/</span><br><span class="line">private <span class="function"><span class="title">Singleton1</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">提供一个共外界来获得当前类的一个实例的类方法</span><br><span class="line">注意：类方法所访问的类的属性一定是类属性</span><br><span class="line">*/</span><br><span class="line">public static Singleton1 <span class="function"><span class="title">getInstance</span></span>()&#123;</span><br><span class="line"><span class="keyword">if</span>(s == null)&#123;</span><br><span class="line">s = new Singleton1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestSingleton1&#123;</span><br><span class="line"></span><br><span class="line">public static void main(String [] args)&#123;</span><br><span class="line"></span><br><span class="line">Singleton1 s = Singleton1.getInstance();</span><br><span class="line">System.out.println(s);</span><br><span class="line">Singleton1 s1 = Singleton1.getInstance();</span><br><span class="line">System.out.println(s1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第3天程序的流程控制</title>
      <link href="/2015/11/18/%E7%AC%AC3%E5%A4%A9%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
      <url>/2015/11/18/%E7%AC%AC3%E5%A4%A9%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="一、判断结果"><a href="#一、判断结果" class="headerlink" title="一、判断结果"></a>一、判断结果</h3><ol><li>简单if</li></ol><p>语法：<strong>if(条件判断表达式){<br>        执行语句<br>      }</strong><br><a id="more"></a><br>如果条件判断的表达式返回值是true则可以执行if内部的语句，否则如果是false就不可以执行。</p><p>范例1：如果java考试成绩大于等于60及格</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Demo1&#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">int score = 70;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(score &gt;= 60)&#123;</span><br><span class="line">System.out.println(<span class="string">"及格"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"程序结束"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>if…else</li></ol><p>语法：if(条件判断表达式){<br>        执行语句<br>      }else{<br>        执行语句<br>}</p><p>范例2：如果java考试成绩大于60及格，否则是不及格</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Demo1&#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">int score = 10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(score &gt;= 60)&#123;</span><br><span class="line">System.out.println(<span class="string">"及格"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"不及格"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"程序结束"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>多重 if….else if…else</li></ol><p>语法：<br><strong>if(条件判断表达式){<br>        执行语句<br>      }else if(条件表达式1){<br>        执行语句<br>      }else if(条件表达式2){<br>        …..<br>      }else{<br>}</strong></p><p>范例3：如果大于等于60小于等于85及格，大于等于85小于100优秀，如果等于100完美，其余的不及格。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Demo1&#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">int score = 100;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(score &gt;= 60 &amp;&amp; score &lt; 85)&#123;</span><br><span class="line">System.out.println(<span class="string">"及格了"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= 85 &amp;&amp; score &lt; 100)&#123;</span><br><span class="line">System.out.println(<span class="string">"优秀"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score == 100)&#123;</span><br><span class="line">System.out.println(<span class="string">"完美"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"不及格"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"程序结束"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例: 如果工资大于3000D级，大于5000C级，大于7000B级，大于10000A级<br>通过简单if组合的形式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class Demo2&#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int salary = 7000;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(salary &gt;= 3000 &amp;&amp; salary &lt; 5000)&#123;</span><br><span class="line">System.out.println(<span class="string">"D级"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(salary &gt;= 5000 &amp;&amp; salary &lt; 7000)&#123;</span><br><span class="line">System.out.println(<span class="string">"C级"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(salary &gt;= 7000 &amp;&amp; salary &lt; 10000)&#123;</span><br><span class="line">System.out.println(<span class="string">"B级"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(salary &gt;= 10000)&#123;</span><br><span class="line">System.out.println(<span class="string">"A级"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过多重if实现</p><h3 id="二、Switch分支判断"><a href="#二、Switch分支判断" class="headerlink" title="二、Switch分支判断"></a>二、Switch分支判断</h3><p>Switch：由上到下用switch中的表达式和值进行比较，如果匹配成功就执行case后的语句，在执行break的时跳出switch，如果一个也没有匹配上就执行default默认情况。</p><p>Switch（表达式）{<br>    case 常量1：<br>    执行语句1；<br>    break；<br>    case 常量2：<br>    执行语句2；<br>    break；<br>    …..<br>default:<br>执行语句 ；<br>break；<br>}</p><p>范例1：通过等级打印不同星<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class Demo4&#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">/***</span><br><span class="line">等级1用☆</span><br><span class="line">等级2用☆☆</span><br><span class="line">等级3用☆☆☆</span><br><span class="line">等级4用☆☆☆☆</span><br><span class="line">等级4用☆☆☆☆☆</span><br><span class="line">*/</span><br><span class="line">int grade = 0;</span><br><span class="line"></span><br><span class="line">switch(grade)&#123;</span><br><span class="line"><span class="keyword">case</span> 1:</span><br><span class="line">System.out.println(<span class="string">"☆"</span>);</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line"><span class="keyword">case</span> 2:</span><br><span class="line">System.out.println(<span class="string">"☆☆"</span>);</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line"><span class="keyword">case</span> 3:</span><br><span class="line">System.out.println(<span class="string">"☆☆☆"</span>);</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line"><span class="keyword">case</span> 4:</span><br><span class="line">System.out.println(<span class="string">"☆☆☆☆"</span>);</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line"><span class="keyword">case</span> 5:</span><br><span class="line">System.out.println(<span class="string">"☆☆☆☆☆"</span>);</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">default:</span><br><span class="line">System.out.println(<span class="string">"输入错误"</span>);</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Break可以省略不会报错，如果省略就会穿透执行语句（不管是否能匹配上），知道遇到一个break才会跳出，所以我们不建议省略break。</p><p>在jdk1.7之前，swtich的表达式只能是byte, short, char, int,但是1.7后可以使用String</p><p>范例2：计算指定年的月中有多少天<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">class Demo5&#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">//计算每一年的每一月有几天</span><br><span class="line">int year = 2000;</span><br><span class="line">int month = 2;</span><br><span class="line">int day = 0;</span><br><span class="line"></span><br><span class="line">switch(month)&#123;</span><br><span class="line"><span class="keyword">case</span> 1:</span><br><span class="line"><span class="keyword">case</span> 3:</span><br><span class="line"><span class="keyword">case</span> 5:</span><br><span class="line"><span class="keyword">case</span> 7:</span><br><span class="line"><span class="keyword">case</span> 8:</span><br><span class="line"><span class="keyword">case</span> 10:</span><br><span class="line"><span class="keyword">case</span> 12:</span><br><span class="line">day = 31;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line"><span class="keyword">case</span> 4:</span><br><span class="line"><span class="keyword">case</span> 6:</span><br><span class="line"><span class="keyword">case</span> 9:</span><br><span class="line"><span class="keyword">case</span> 11:</span><br><span class="line">day = 30;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line"><span class="keyword">case</span> 2:</span><br><span class="line"><span class="keyword">if</span>((year%400) == 0 || (year%4 == 0&amp;&amp; year%100 != 0))&#123;</span><br><span class="line">day = 29;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">day = 28;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">default:</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(year + <span class="string">"年"</span>+ month+<span class="string">"月有"</span>+day+<span class="string">"天"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><font color="red">注意：</font><p>Switch和多重if的区别：</p><p>If可以做等值判断也可以做区间判断。</p><p>Switch只能做等值判断，不能做区间判断</p><ol start="3"><li>三元运算符</li></ol><p>语法：<strong>表达式1  关系运算符 表达式2？表达式3：表达式4</strong></p><p>？前面的表达式2如果运算的结果是true，整个表达式的结果就是表达式3</p><p>？前面的表达式2如果运算的结果是false，整个表达式的结果就是表达式4</p><p>注意：三元运算符适合两个值的判断</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Demo6&#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">//如果gender=1我们genderText就是男，如果gender=2那么genderText=女</span><br><span class="line"></span><br><span class="line">int gender = 1;</span><br><span class="line">char genderText = <span class="string">' '</span>;</span><br><span class="line">/*</span><br><span class="line"><span class="keyword">if</span>(gender == 1)&#123;</span><br><span class="line">genderText = <span class="string">'男'</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(gender == 2)&#123;</span><br><span class="line">genderText = <span class="string">'女'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(genderText);</span><br><span class="line">*/</span><br><span class="line">//表达式1 赋值 表达式2</span><br><span class="line">genderText = gender == 1?<span class="string">'男'</span>:<span class="string">'女'</span>;</span><br><span class="line">System.out.println(genderText);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>循环结构</li></ol><p>循环：就是重复发生的过程（循环一般有重复的前提条件）。<br><strong>1.While<br>语法：while(表达式){<br>        循环体<br>      }</strong><br>表达式结果如果是true那么就执行循环体，如果是false就结束循环<br>   <img src="/img/10.png" alt="流程图" title="流程图"><br>范例：1<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Demo7&#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">打印1到100之间的数字</span><br><span class="line">分析：</span><br><span class="line">循环条件：是否完成打印100次</span><br><span class="line">循环操作：输出，自增</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">//循环变量，计数器</span><br><span class="line">int i = 1;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= 100)&#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">//更改循环条件</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>范例：2<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class Demo8&#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">需求：打印1到100之间的所有的偶数和</span><br><span class="line">分析：</span><br><span class="line">循环条件：判断计数器是否小于等于100</span><br><span class="line">循环操作：累加偶数和，更新计数器</span><br><span class="line">*/</span><br><span class="line">//定义计数器</span><br><span class="line">int i = 0;</span><br><span class="line">//定义偶数和的结果变量</span><br><span class="line">int sum = 0;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= 100)&#123;</span><br><span class="line">//判断i是否是偶数</span><br><span class="line"><span class="keyword">if</span>(i%2 == 0)&#123;</span><br><span class="line">//累加偶数</span><br><span class="line">sum += i;</span><br><span class="line">&#125;</span><br><span class="line">//更新计数器</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(sum);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="2"><li>do…while<br>语法：*do{<pre><code>循环体</code></pre>}while(表达式)</li></ol><p><font color="red">注意：do…while和while，前者是先执行循环体，后者是先判断在执行循环体。</font><br>   <img src="/img/11.png" alt="流程图" title="流程图"></p><p>范例1：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class Demo9&#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">需求：打印100到1000之间的所有水仙花数。</span><br><span class="line">234</span><br><span class="line">分析：</span><br><span class="line">循环条件：判断计数器是大于等于100小于1000</span><br><span class="line">循环操作：更新计数器，判断是否是水仙花数。</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">int i = 100;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">//获得个位数</span><br><span class="line">int g = i%10;</span><br><span class="line">//获得十位数</span><br><span class="line">int s = i/10%10;</span><br><span class="line">//获得百位数</span><br><span class="line">int b = i/100;</span><br><span class="line">//判断是否是水仙花数</span><br><span class="line"><span class="keyword">if</span>((g*g*g + s*s*s + b*b*b) == i)&#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">while</span>(i &lt; 1000);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>   <img src="/img/12.png" alt="运行结果" title="运行结果"><br>范例2：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class Demo10&#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">需求：打印100到1000之间的所有夹心饼数。</span><br><span class="line">如：191,838</span><br><span class="line">分析：</span><br><span class="line">循环条件：判断计数器是大于等于100小于1000</span><br><span class="line">循环操作：更新计数器，判断是否是夹心饼干</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">int i = 100;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">//获得个位数</span><br><span class="line">int g = i%10;</span><br><span class="line"></span><br><span class="line">//获得百位数</span><br><span class="line">int b = i/100;</span><br><span class="line">//判断是否是水仙花数</span><br><span class="line"><span class="keyword">if</span>(g == b)&#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">while</span>(i &lt; 1000);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>   <img src="/img/13.png" alt="运行结果" title="运行结果"></p><ol start="3"><li>for</li></ol><p>语法：<strong>for(表达式1; 表达式2; 表达式3){<br>            循环体<br>       }</strong></p><p>表达式1：计数器的初始化，它只初始化一次</p><p>表达式2：循环条件的判断，多次执行</p><p>表达式3：修改计数器，多次执行</p><p>范例1：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Demo11&#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">需求：打印1到100之间的所有的偶数和</span><br><span class="line">分析：</span><br><span class="line">循环条件：判断计数器是否小于等于100</span><br><span class="line">循环操作：累加偶数和，更新计数器</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">//定义偶数和的结果变量</span><br><span class="line">int sum = 0;</span><br><span class="line"><span class="keyword">for</span>(int i = 0; i &lt;= 100; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i%2 == 0)&#123;</span><br><span class="line">sum += i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(sum);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>范例2：打印一个5行5列的☆<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Demo12&#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">需求：打印5行5列 的☆</span><br><span class="line">分析：</span><br><span class="line">我们要使用2个循环</span><br><span class="line">循环条件：判断计数器是否小于等于100</span><br><span class="line">循环操作：累加偶数和，更新计数器</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">//定义偶数和的结果变量</span><br><span class="line"><span class="keyword">for</span>(int i = 0; i &lt; 5; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(int j = 0; j &lt; 5; j++)&#123;</span><br><span class="line">System.out.print(<span class="string">"☆"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/img/14.png" alt="运行结果" title="运行结果"><br>范例2：打印乘法口诀<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1*1=1</span><br><span class="line">1*2=22*2=4</span><br><span class="line">1*3=32*3=63*3=9</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Demo13&#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">范例2：打印乘法口诀</span><br><span class="line">1*1=1</span><br><span class="line">1*2=22*2=4</span><br><span class="line">1*3=32*3=63*3=9</span><br><span class="line">…..</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(int i = 1; i &lt;=9; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(int j = 1; j &lt;= i; j++)&#123;</span><br><span class="line">System.out.print(j+<span class="string">"*"</span>+i+<span class="string">"="</span>+j*i+<span class="string">"\t"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   <img src="/img/15.png" alt="运行结果" title="运行结果"><br>总结：</p><ul><li><p>最重要的循环是while和for</p></li><li><p>如果循环开始之前就能确定循环次数我们建议使用for</p></li><li><p>如果循环次数不定建议使用while</p></li></ul><ol start="4"><li>break</li></ol><p>Break用来跳出循环和switch<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Demo14&#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">/**</span><br><span class="line">需求：运动会上跑5000米，跑到第三圈时，抽筋了退赛</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"><span class="keyword">for</span>(int i = 1; i &lt;= 10; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i == 3)&#123;</span><br><span class="line">System.out.println(<span class="string">"抽筋了退出"</span>);</span><br><span class="line">//跳出循环</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"我跑到第"</span>+i+<span class="string">"圈"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="5"><li>continue</li></ol><p>也是来控制循环，在某次循环的时候放弃，后续的接着循环。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Demo15&#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">/**</span><br><span class="line">需求：一周上五天班，然后我周三请假一天</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"><span class="keyword">for</span>(int i = 1; i &lt;= 5; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i == 3)&#123;</span><br><span class="line">System.out.println(<span class="string">"周三肚子疼请假"</span>);</span><br><span class="line">//跳出本次循环，接着下一次循环</span><br><span class="line"><span class="built_in">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"今天星期"</span>+i+<span class="string">"上班"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Java基础笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第2天Java基础语法</title>
      <link href="/2015/11/11/%E7%AC%AC2%E5%A4%A9Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2015/11/11/%E7%AC%AC2%E5%A4%A9Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="一、标识符"><a href="#一、标识符" class="headerlink" title="一、标识符"></a>一、标识符</h3><ol><li>在java语言中，对各种变量，方法和类等要素命名时所使用的字符序列就是标识符。这些标识符有jdk定义好的，也有我们自己开发时候需要定义的.<a id="more"></a></li><li>java中标识符由26个英文字符大小写，数字0-9，符号_ $。注意：数字不能开头。</li><li>java中是严格区分大小写</li><li>在实际写程序的过程中定义标识符遵守“见名之意”.</li></ol><ul><li>类名和接口的规范：</li></ul><p>在上面的约束的命名规范的情况下，首字符要大写。如果由多个单词构成每个单词的首字符都大写。</p><p>XxxYyy 如：PersonService</p><ul><li>变量名和方法名：</li></ul><p>在上面的约束的命名规范的情况下，我们遵守单词首字符不要大写，如果由多个单词构成，从第二个单词起首字符都大写。这叫驼峰模式。</p><p>xxxYyyZzz  如：personDao</p><ul><li>包名<br>在上面的约束的命名规范的情况下，都小写。</li></ul><p>xxx.yyy.zzz</p><ul><li>常量</li></ul><p>所有字符都大写，多个单词之间使用下划线来分隔。</p><p>XXX_YYY_ZZZ</p><h3 id="二、关键字"><a href="#二、关键字" class="headerlink" title="二、关键字"></a>二、关键字</h3><p>Jdk定义的标识符就是关键字，我们不可以使用。所以我们定义标识符的时候一定要避开关键字。<br><img src="/img/5.png" alt="关键字" title="关键字"><br><img src="/img/6.png" alt="关键字" title="关键字"></p><h3 id="三、java中的注释"><a href="#三、java中的注释" class="headerlink" title="三、java中的注释"></a>三、java中的注释</h3><p>注释就是给程序说明的作用，我们要养成写注释的良好习惯，增强代码的可读性。<br>Jvm运行时注释不会被解析。Jvm会跳过注释。</p><ul><li>多行注释：/<em>….</em>/,通常用于方法内的多行或者类的多行注释</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"HelloWorld1"</span>);</span><br><span class="line">System.out.println(<span class="string">"HelloWorld1"</span>);</span><br><span class="line">System.out.println(<span class="string">"HelloWorld1"</span>);</span><br><span class="line">System.out.println(<span class="string">"HelloWorld1"</span>);</span><br><span class="line">System.out.println(<span class="string">"HelloWorld1"</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><ul><li><p>单行注释语法：//，注释代码中的一行，建议大家放在要注释的代码的上面</p></li><li><p>文档注释：语法/*<em>..</em>/,用于类的说明和方法的说明</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *这是我们第一个HelloWorld的程序</span><br><span class="line"> */</span><br><span class="line">class HelloWorld&#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">   *这是这是我们的主方法</span><br><span class="line">   */</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">//输出helloWorld</span><br><span class="line">System.out.println(<span class="string">"HelloWorld1"</span>);</span><br><span class="line">//输出helloWorld1</span><br><span class="line">System.out.println(<span class="string">"HelloWorld1"</span>);</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">System.out.println(<span class="string">"HelloWorld1"</span>);</span><br><span class="line">System.out.println(<span class="string">"HelloWorld1"</span>);</span><br><span class="line">System.out.println(<span class="string">"HelloWorld1"</span>);</span><br><span class="line">*/</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、数据类型"><a href="#四、数据类型" class="headerlink" title="四、数据类型"></a>四、数据类型</h3><h4 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1.基本数据类型"></a>1.基本数据类型</h4><ol><li>基本数据类型概述</li></ol><p>根据不同的数据类型可以划分内存的存储的空间大小，不同的类型就是数据类型</p><ul><li><p>整数的基本类型</p><p>  byte        最小存储整数的空间 <font color="red">1字节</font></p><p>  short                                   <font color="red">2字节</font></p><p>  int                            <font color="red">4字节</font></p><p>  long        最大存储整数的空间        <font color="red">8字节</font><br>  <img src="/img/7.png" alt="基本数据类型" title="基本数据类型"></p><p>  byte和short计算时产生的结果默认是int类型</p></li><li><p>小数的基本类型</p></li></ul><p>flout     <font color="red">4字节</font></p><p>double        <font color="red">8字节</font></p><p>如果整型数据在计算的时候结果出现了小数，结果类型默认是double</p><p>  <img src="/img/8.png" alt="基本数据类型" title="基本数据类型"></p><p>  建议使用double</p><ul><li><p>字符数据类型<br>char             <font color="red">2字节</font><br>如：‘a‘，’周‘</p></li><li><p>布尔数据类型</p></li></ul><p>boolean    <font color="red">true   false</font></p><p>一共8种数据类型。</p><ol start="2"><li>定义变量</li></ol><p>语法：数据类型 变量名 = 值;</p><p>我们对变量的操作：取值和存值。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Demo1&#123;</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">//数据类型 变量名 = 值;</span><br><span class="line">int age = 10;</span><br><span class="line">System.out.println(age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>变量的定义位置：定义在方法中或者语句块中。</p><p>变量的一定要赋初始值，否则使用该变量的时候会报错的。</p><p>变量的作用范围：<br>只在当前的大括号内有效，大括号外的所有程序不能使用该变量，所以这种变量也称为局部变量。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">class Demo2&#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">//字节数据类型</span><br><span class="line">byte workYear = 10;</span><br><span class="line">//短整型</span><br><span class="line">short salary = 2000;</span><br><span class="line">//数据类型 变量名 = 值;</span><br><span class="line">int age = 30;</span><br><span class="line">//长整型,在定义长长整型的数据时在值后面加上l</span><br><span class="line">long empTime = 10000000l;</span><br><span class="line"></span><br><span class="line">//小数类型<span class="built_in">float</span>,<span class="built_in">float</span>类型的数值后面一定要有f</span><br><span class="line"><span class="built_in">float</span> price = 45.6f;</span><br><span class="line">//小数类型double,建议在值的后面加d</span><br><span class="line">double totalPrice = 10000.5d;</span><br><span class="line"></span><br><span class="line">//布尔数据类型</span><br><span class="line">boolean isMarry = <span class="literal">false</span>;</span><br><span class="line">//字符类型</span><br><span class="line">char sex = <span class="string">'男'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"工作年限："</span>+workYear);</span><br><span class="line">System.out.println(<span class="string">"月薪："</span>+salary);</span><br><span class="line">System.out.println(<span class="string">"年龄："</span>+age);</span><br><span class="line">System.out.println(<span class="string">"入职时长："</span>+empTime);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"单价："</span>+price);</span><br><span class="line">System.out.println(<span class="string">"总价："</span>+totalPrice);</span><br><span class="line">System.out.println(<span class="string">"是否结婚："</span>+isMarry);</span><br><span class="line">System.out.println(<span class="string">"性别："</span>+sex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这八种数据类型是有默认值的。这个默认值如果在变量中不能使用的，必须是在类的属性中使用，因为类的属性可以不赋初始化值。<br><img src="/img/9.png" alt="默认值" title="默认值"></p><ol start="3"><li>基本数据类型转换</li></ol><p>八种数据类型除了布尔类型以外都可以相互的转换。</p><ul><li>1.自动类型转换</li></ul><p>基本数据类型在计算的时候都会向数值范围大的方向转换</p><p>byte—short–int —-long–float—double</p><ol><li>所有的byte类型和short类型和char值运算的时候都会提供成int类型。</li><li>如果计算中一个操作数据类型是long，另一个数的空间小于等于long，那么结果就是long</li><li>如果计算中一个操作数据类型是float，另一个数的空间小于等于float，那么结果就是float</li><li>如果计算中一个操作数据类型是double，另一个数的空间小于等于double，那么结果就是double</li></ol><ul><li>2.强制转换</li></ul><p>当大容量类型的变量向小容量的类型去转换需要强制转换。</p><p>语法：（目标类型）值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//在java程序中同一个范围内变量名字不能重复</span><br><span class="line"> int i3 = 97;</span><br><span class="line"> //把int类型的数据强制转换成byte</span><br><span class="line"> byte b3 = (byte)i3;</span><br><span class="line"> //把int类型的数据强制转换成short</span><br><span class="line"> short s3 = (short)i3;</span><br><span class="line"> //把int类型的数据强制转换成char</span><br><span class="line"> char c3 = (char)i3;</span><br><span class="line"> System.out.println(b3);</span><br><span class="line"> System.out.println(s3);</span><br><span class="line"> System.out.println(c3);</span><br><span class="line"> </span><br><span class="line">  int i4 = 200;</span><br><span class="line">  //注意如果被转换的值超过了要转换的值的最大值，转换时精度就损失了，不准确。</span><br><span class="line">  byte b4 = (byte)i4;</span><br><span class="line">  System.out.println(b4);</span><br><span class="line">  //把long类型的数据转换成int</span><br><span class="line">  long l4 = 10000l;</span><br><span class="line">  int i5 = (int)l4;</span><br><span class="line">  System.out.println(i5);</span><br><span class="line">  </span><br><span class="line">  //把小数<span class="built_in">float</span>转换成整型，直接把小数舍弃（非四舍五入）</span><br><span class="line">  <span class="built_in">float</span> f1 = 12.5f;</span><br><span class="line">  int i6 = (int)f1;</span><br><span class="line">  System.out.println(i6);</span><br><span class="line">   //把小数double转换成整型，直接把小数舍弃（非四舍五入）</span><br><span class="line">  double d1 = 15.5f;</span><br><span class="line">  int i7 = (int)d1;</span><br><span class="line">  System.out.println(i7);</span><br></pre></td></tr></table></figure></p><font color="red">思考：</font><p>byte b1 = 3，b2=4, b;</p><p>b = b1 + b2;//报错，因为byte类型计算完毕后会自动提升为int类型。</p><p>b= 4+3;//不会报错，因为int类型的常量相加只要没有达到byte的上限就可以。</p><ul><li>2.引用数据类型</li></ul><h3 id="五、运算符"><a href="#五、运算符" class="headerlink" title="五、运算符"></a>五、运算符</h3><ol><li>算数运算符</li></ol><ul><li><p>四则运算：+，-，*，/</p></li><li><p>给数值变量自身加1或减一</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">class Demo4&#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">//定义两个int类型的变量</span><br><span class="line">int a = 30;</span><br><span class="line">int b = 20;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"a+b="</span>+(a+b));</span><br><span class="line">System.out.println(<span class="string">"a-b="</span>+(a-b));</span><br><span class="line">System.out.println(<span class="string">"a*b="</span>+(a*b));</span><br><span class="line">//整数之间做除法叫取整30/20=1.5,要把小数位舍弃</span><br><span class="line">System.out.println(<span class="string">"a/b="</span>+(a/b));</span><br><span class="line"></span><br><span class="line">//++, --</span><br><span class="line">//a++起到了给a加1的作用</span><br><span class="line">a++;</span><br><span class="line">//会输出a加1之后的值</span><br><span class="line">System.out.println(a);</span><br><span class="line">//a--起到了给a减1的作用</span><br><span class="line">a--;</span><br><span class="line">//会输出a减一1之后的值</span><br><span class="line">System.out.println(a);</span><br><span class="line"></span><br><span class="line">//如果我后++或者后--和用变量在同一句代码中使用，是先使用a变量，再做加1或者减一</span><br><span class="line">System.out.println(a--);</span><br><span class="line">System.out.println(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//起到了给变量a加1的作用</span><br><span class="line">--a;</span><br><span class="line">System.out.println(a);</span><br><span class="line"></span><br><span class="line">//如果我前++或者前--和用变量在同一句代码中使用，是先做加1或者减一，再使用a变量</span><br><span class="line">System.out.println(--a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>赋值运算符</li></ol><p>=，+=，-=，*=，/=, %=</p><p>=：将左边的数值赋给右边的变量</p><p>+=：int x = 2；x+=3;相当于x=x+3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class Demo5&#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">//把20这个值赋给a变量</span><br><span class="line">int a = 20;</span><br><span class="line"></span><br><span class="line">//+=,相当于a = a + 5;</span><br><span class="line">//a = a + 5;</span><br><span class="line"></span><br><span class="line">a+=5;</span><br><span class="line">System.out.println(a);</span><br><span class="line"></span><br><span class="line">//-=,相当于a = a - 5;</span><br><span class="line">a-=5;</span><br><span class="line">System.out.println(a);</span><br><span class="line"></span><br><span class="line">//*=,相当于a = a * 5;</span><br><span class="line">a*=5;</span><br><span class="line">System.out.println(a);</span><br><span class="line"></span><br><span class="line">///=,相当于a = a / 5;</span><br><span class="line">a/=5;</span><br><span class="line">System.out.println(a);</span><br><span class="line"></span><br><span class="line">//%=,相当于a = a % 5;</span><br><span class="line">a%=5;</span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>比较运算符</li></ol><p>==，!=, &gt;, &gt;=, &lt;, &lt;=</p><p>==:等于 !=:不等于   &gt;:大于 &gt;=:大于等于<br>&lt;:小于<br>&lt;=:小于等于</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Demo6&#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">int a = 19;</span><br><span class="line"></span><br><span class="line">int b = 10;</span><br><span class="line">//比较运算符的结果是布尔类型<span class="literal">true</span>，<span class="literal">false</span></span><br><span class="line">System.out.println(<span class="string">"a==b:"</span>+(a==b));</span><br><span class="line">System.out.println(<span class="string">"a!=b:"</span>+(a!=b));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"a&gt;b:"</span>+(a&gt;b));</span><br><span class="line">System.out.println(<span class="string">"a&lt;b:"</span>+(a&lt;b));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"a&gt;=b:"</span>+(a&gt;=b));</span><br><span class="line">System.out.println(<span class="string">"a&lt;=b:"</span>+(a&lt;=b));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>逻辑运算符</li></ol><p>&amp;，|，^, &amp;&amp;, ||，！</p><p>应用场景：如果某个结果需要多个条件满足或者部分条件满足的判断时使用。</p><p>&amp;: 用于连接多个表达式的判断，true&amp;true=true，<strong>&amp;两边的表达式都要参与计算。</strong></p><p>|:用于连接多个表达式的判断，false|false=false, <strong>&amp;两边的表达式都要参与计算</strong></p><font color="red">短路逻辑（效率高）</font><p>&amp;&amp;:用于连接多个表达式的判断, true&amp;&amp;true=true，<strong>如果第一个表达式能决定整个表达式的结果第二个表达式就不计算了。</strong></p><p>||:用于连接多个表达式的判断, false||false=false，<strong>如果第一个表达式能决定整个表达式的结果第二个表达式就不计算了。</strong><br>^:用于连接多个表达式的判断,<strong>如果两个表达式相同就是false，不同是true，两边都参加计算</strong> （了解）<br>！：取反</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Demo7&#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">int java = 90;</span><br><span class="line">int sql = 70;</span><br><span class="line"></span><br><span class="line">//只有java和sql打分都大于90分才合格</span><br><span class="line">//System.out.println(java&gt;=90&amp;(sql++) &gt;= 90);</span><br><span class="line"></span><br><span class="line">//System.out.println(java&gt;=90|(sql++) &gt;= 90);</span><br><span class="line"></span><br><span class="line">//短路与，如果第一个表达式是<span class="literal">false</span>，后面的表达式就不需要判断了，效率高</span><br><span class="line">//System.out.println(java&gt;=90&amp;&amp;(sql++) &gt;= 90);</span><br><span class="line">//短路或，如果第一个表达式是<span class="literal">true</span>，后面的表达式就不需要判断了，效率高</span><br><span class="line">//System.out.println(java&gt;=90||(sql++) &gt;= 90);</span><br><span class="line">//异或了解</span><br><span class="line">//System.out.println(java&gt;=90^(sql++) &gt;= 90);</span><br><span class="line">//System.out.println(sql);</span><br><span class="line">//如果对于表达式取反需要通过括号括上。</span><br><span class="line">System.out.println(!(java &gt; 80));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第1天计算机基础初识JAVASE</title>
      <link href="/2015/10/15/%E7%AC%AC1%E5%A4%A9%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E5%88%9D%E8%AF%86JAVASE/"/>
      <url>/2015/10/15/%E7%AC%AC1%E5%A4%A9%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E5%88%9D%E8%AF%86JAVASE/</url>
      
        <content type="html"><![CDATA[<h3 id="一、计算机语言概述"><a href="#一、计算机语言概述" class="headerlink" title="一、计算机语言概述"></a>一、计算机语言概述</h3><p>计算机能识别的语言：</p><ol><li>机器语言：由0和1组成的可以被电脑理解，人很难理解。</li><li>汇编语言：由汇编软件把汇编语言翻译成机器语言然后电脑可以理解，人可以理解。<a id="more"></a></li><li>高级语言：与人类的自然语言很接近，由高级语言的编译器来把高级语言翻译成机器语言，然后计算机来运行，java，c，c++,….</li></ol><h3 id="二、Java概述"><a href="#二、Java概述" class="headerlink" title="二、Java概述"></a>二、Java概述</h3><p>1995年诞生于sun公司，2009被Oracle收购。</p><ul><li>Java语言的特点：</li></ul><ol><li>简洁有效：面向对象，简单易学。</li><li>java跨平台：java写好的程序可以在不同平台来运行，一次编译处处运行。Java为每一个平台提供jvm（java virtual machine）。</li><li>适合分布式计算：java语言具有强大的，易于使用的互联网能力，非常适合大型的互联网分布式项目。</li></ol><ul><li>Java分支</li></ul><ol><li>javase: 前身j2se,2005年后改成javase</li><li>javame：前身是j2me,2005改成javame，给移动设备做支持，目前基本上淘汰了。</li><li>javaee：前身j2ee，企业级应用技术开发支持</li></ol><h3 id="三、Java开发环境的介绍和搭建"><a href="#三、Java开发环境的介绍和搭建" class="headerlink" title="三、Java开发环境的介绍和搭建"></a>三、Java开发环境的介绍和搭建</h3><ol><li><strong>JRE</strong>：java runtime environment java运行环境，JRE包括java虚拟机（jvm java virtual machine）和java程序所需要核心的类库。如果先要运行java程序，计算机中安装JRE就可以了。</li><li><strong>JDK</strong>：java development kit JDK是给开发人员使用的，JDK包含了JRE，所以我们只要安装JDK就可以了。</li><li>JDK的安装</li></ol><font color="red">注意，安装JDK时不要有中文路径。</font><ol start="4"><li>环境变量的介绍</li></ol><p>配置环境变量步骤：</p><p>此电脑右键属性——高级系统设置—–高级——-环境变量<br><img src="/img/1.png" alt="环境变量配置" title="环境变量配置"></p><p>用户范围的环境变量：给当前操作系统登录的用户使用<br>系统环境变量：给所有用户使用。</p><p>环境变量的配置：<br>当我们在命令行中执行javac的时候，我们发现无法执行，就是因为当前的目录下没有javac的命令。如果想要在任意目录执行我们必须配置环境变量Path，path中的路径就是我们可以在任意的目录来执行程序，如果当前目录不存在程序就去path中去查找<br><img src="/img/2.png" alt="环境变量配置" title="环境变量配置"></p><font color="green">环境变量的第二种配置方式（强烈推荐使用）</font><p>首先创建java_home: C:\Program Files\Java\jdk1.7.0_45指定bin的上一层目录<br>然后在path中通过%%来引入java_home,然后在path中指定bin的目录</p><p><img src="/img/3.png" alt="环境变量配置" title="环境变量配置"></p><p>建议把环境变量配置在用户的环境变量中。</p><font color="green">第一个java程序HelloWorld</font><p>推荐大家使用UtralEditor</p><p>Java文件是以.java为后缀，类名要和文件名一致，类名的首字母要大写，然后在类中写入主方法，大括号一定是成对出现，类和方法之间要有缩进，方法和方法体之间也要有缩进，缩进使用Tab键，不要使用空格。除了带有大括号的代码行，每一行结尾都要有分号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class HelloWorld&#123;</span><br><span class="line">/**</span><br><span class="line">主方法</span><br><span class="line">*/</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">//输出字符串HelloWorld</span><br><span class="line">System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java文件是不能直接运行的，必须要编译成.class二进制文件，然后才能运行。<br>我们需要开启命令行来编译和运行。<br><img src="/img/4.png" alt="运行结果" title="运行结果"></p>]]></content>
      
      
      <categories>
          
          <category> Java基础笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello world</title>
      <link href="/2015/10/02/Hello-World/"/>
      <url>/2015/10/02/Hello-World/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
